#include <FastLED.h>

#define LIGHT_SENSOR_PIN  A0
#define LIGHT_MIN        200
#define LIGHT_MAX        900
#define NUM_LEDS          64
#define DATA_PIN           6
#define BRIGHNESS         64

//#define DEBUG

CRGB leds[NUM_LEDS];
int c = 0;
int dot = 0;
int b = 10;
unsigned int randomDot = 0;

const unsigned int FacePixelMap[64] = {
  7,  8, 23, 24, 39, 40, 55, 56, 
  6,  9, 22, 25, 38, 41, 54, 57, 
  5, 10, 21, 26, 37, 42, 53, 58, 
  4, 11, 20, 27, 36, 43, 52, 59, 
  3, 12, 19, 28, 35, 44, 51, 60, 
  2, 13, 18, 29, 34, 45, 50, 61, 
  1, 14, 17, 30, 33, 46, 49, 62, 
  0, 15, 16, 31, 32, 47, 48, 63
};

unsigned int currentFace = 0;
unsigned int brightness = 0;
unsigned int timeToUpdate = 60; // cycles by 50 ms delay, 50*60 = 3000 = 3 seconds

bool usedPoint[64] = { 
  false, false, false, false, false, false, false, false, 
  false, false, false, false, false, false, false, false, 
  false, false, false, false, false, false, false, false, 
  false, false, false, false, false, false, false, false, 
  false, false, false, false, false, false, false, false, 
  false, false, false, false, false, false, false, false, 
  false, false, false, false, false, false, false, false, 
  false, false, false, false, false, false, false, false
};


const unsigned int maxFaces = 7;

const PROGMEM byte imgFaces[192*maxFaces] = { 
  0xff, 0xa8, 0x00, 0xff, 0xff, 0x00, 0xff, 0x4e, 0x00, 0xdd, 0x00, 0x00, 0xff, 0x00, 0x00, 0xff, 0x4e, 0x00, 0xff, 0x4e, 0x00, 0xff, 0x4e, 0x00, 0xff, 0x4e, 0x00, 0xff, 0xff, 0x00, 0xff, 0x4e, 0x00, 0xdd, 0x00, 0x00, 0xdd, 0x00, 0x00, 0xff, 0x00, 0x00, 0xff, 0x4e, 0x00, 0xff, 0x00, 0x00, 0xff, 0x4e, 0x00, 0x09, 0x09, 0x07, 0x09, 0x09, 0x07, 0xff, 0x00, 0x00, 0xff, 0x00, 0x00, 0x09, 0x09, 0x07, 0x09, 0x09, 0x07, 0xff, 0x00, 0x00, 0xff, 0x00, 0x00, 0x09, 0x09, 0x07, 0x00, 0x00, 0x00, 0xff, 0x4e, 0x00, 0xff, 0xa8, 0x00, 0x00, 0x00, 0x00, 0x09, 0x09, 0x07, 0xff, 0x00, 0x00, 0xdd, 0x00, 0x00, 0xff, 0x00, 0x00, 0xff, 0x00, 0x00, 0x09, 0x09, 0x07, 0x09, 0x09, 0x07, 0xff, 0xff, 0x00, 0xff, 0x4e, 0x00, 0xff, 0x00, 0x00, 0xff, 0x4d, 0x00, 0xf5, 0x00, 0x00, 0x07, 0x07, 0x04, 0x08, 0x08, 0x05, 0x08, 0x08, 0x05, 0x07, 0x07, 0x04, 0xff, 0xa8, 0x00, 0xff, 0x00, 0x00, 0xff, 0xa8, 0x00, 0xff, 0x4d, 0x00, 0x07, 0x07, 0x04, 0xd4, 0x00, 0x00, 0xf5, 0x00, 0x00, 0x07, 0x07, 0x04, 0xff, 0x00, 0x00, 0xdd, 0x00, 0x00, 0xff, 0xa8, 0x00, 0xff, 0x4e, 0x00, 0xb5, 0x00, 0x00, 0xff, 0x00, 0x00, 0xff, 0x00, 0x00, 0xa4, 0x10, 0x10, 0xdd, 0x00, 0x00, 0xdd, 0x00, 0x00,
  0x78, 0x00, 0x00, 0x95, 0x00, 0x00, 0xaf, 0x00, 0x00, 0xaf, 0x00, 0x00, 0xaf, 0x00, 0x00, 0xaf, 0x00, 0x00, 0x95, 0x00, 0x00, 0x78, 0x00, 0x00, 0x95, 0x00, 0x00, 0xaf, 0x00, 0x00, 0xd3, 0x00, 0x00, 0xd3, 0x00, 0x00, 0xd3, 0x00, 0x00, 0xd3, 0x00, 0x00, 0xaf, 0x00, 0x00, 0x95, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xd3, 0x00, 0x00, 0xd3, 0x00, 0x00, 0xd3, 0x00, 0x00, 0xd3, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0xd3, 0x00, 0x00, 0xd3, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0xd3, 0x00, 0x00, 0xd3, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0xaf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xd3, 0x00, 0x00, 0xd3, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xaf, 0x00, 0x00, 0x95, 0x00, 0x00, 0xaf, 0x00, 0x00, 0xd3, 0x00, 0x00, 0xd3, 0x00, 0x00, 0xd3, 0x00, 0x00, 0xd3, 0x00, 0x00, 0xaf, 0x00, 0x00, 0x95, 0x00, 0x00, 0x78, 0x00, 0x00, 0x95, 0x00, 0x00, 0xaf, 0x00, 0x00, 0xaf, 0x00, 0x00, 0xaf, 0x00, 0x00, 0xaf, 0x00, 0x00, 0x95, 0x00, 0x00, 0x78, 0x00, 0x00,
  0x1e, 0x0b, 0x00, 0x19, 0x09, 0x00, 0x1e, 0x0a, 0x00, 0x15, 0x07, 0x00, 0x10, 0x02, 0x00, 0x13, 0x04, 0x00, 0x19, 0x09, 0x00, 0x18, 0x08, 0x00, 0x19, 0x09, 0x00, 0x19, 0x09, 0x00, 0x19, 0x09, 0x00, 0x22, 0x10, 0x00, 0x35, 0x18, 0x00, 0x31, 0x18, 0x00, 0x1a, 0x09, 0x00, 0x15, 0x07, 0x00, 0x19, 0x09, 0x00, 0xc1, 0x8a, 0x67, 0xc9, 0x91, 0x6f, 0xd4, 0x9a, 0x80, 0xc9, 0x8d, 0x6f, 0xc9, 0x91, 0x71, 0xb5, 0x74, 0x52, 0x24, 0x11, 0x00, 0xb2, 0x7c, 0x60, 0xbf, 0x84, 0x69, 0xb2, 0x7c, 0x60, 0xb6, 0x80, 0x69, 0xa1, 0x6f, 0x54, 0xc7, 0x8a, 0x6f, 0xa1, 0x64, 0x41, 0xa1, 0x64, 0x41, 0xbf, 0x84, 0x69, 0xff, 0xff, 0xff, 0x48, 0x2f, 0x8a, 0xc0, 0x7a, 0x61, 0xc7, 0x8a, 0x6f, 0x48, 0x2f, 0x8a, 0xff, 0xff, 0xff, 0xb2, 0x7c, 0x60, 0xa1, 0x5d, 0x39, 0xbd, 0x7a, 0x5b, 0xc2, 0x82, 0x6f, 0x65, 0x32, 0x1f, 0x65, 0x32, 0x1f, 0xcb, 0x89, 0x67, 0xa9, 0x65, 0x3b, 0x80, 0x49, 0x24, 0x93, 0x56, 0x36, 0x9a, 0x58, 0x32, 0x31, 0x18, 0x00, 0x75, 0x35, 0x25, 0x75, 0x35, 0x25, 0x31, 0x18, 0x00, 0x92, 0x56, 0x30, 0x81, 0x49, 0x2a, 0x6b, 0x38, 0x1a, 0x69, 0x36, 0x18, 0x31, 0x18, 0x00, 0x31, 0x18, 0x00, 0x31, 0x18, 0x00, 0x31, 0x18, 0x00, 0x83, 0x4c, 0x2c, 0x78, 0x43, 0x22,
  0xac, 0xdd, 0xa5, 0x00, 0xb1, 0x00, 0x41, 0xbd, 0x33, 0xa3, 0xd6, 0xa3, 0xe3, 0xe3, 0xe3, 0x86, 0xef, 0x71, 0x7c, 0xdc, 0x6a, 0x42, 0x93, 0x3e, 0x16, 0x97, 0x13, 0x58, 0xd3, 0x50, 0x33, 0xc2, 0x26, 0x6a, 0xd8, 0x5f, 0x41, 0x94, 0x3c, 0x6c, 0xef, 0x55, 0x5f, 0xc8, 0x4c, 0xe3, 0xe3, 0xe3, 0x3b, 0xd3, 0x26, 0x0a, 0x4a, 0x01, 0x28, 0x4f, 0x20, 0x97, 0xe9, 0x8e, 0x4e, 0x9d, 0x4d, 0x09, 0x43, 0x02, 0x28, 0x4f, 0x20, 0xef, 0xef, 0xef, 0x41, 0xda, 0x2f, 0x09, 0x43, 0x02, 0x00, 0x00, 0x00, 0x61, 0xdf, 0x4c, 0x3b, 0xbc, 0x2a, 0x00, 0x00, 0x00, 0x01, 0x2b, 0x00, 0x76, 0xde, 0x61, 0x8a, 0xe3, 0x82, 0x5f, 0xc2, 0x4e, 0x98, 0xe9, 0x91, 0x07, 0x44, 0x00, 0x08, 0x41, 0x00, 0xd1, 0xe3, 0xcd, 0x3c, 0x8e, 0x38, 0x56, 0xe0, 0x41, 0xab, 0xe3, 0x9f, 0x47, 0x9b, 0x43, 0x28, 0x4f, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0a, 0x4c, 0x02, 0x61, 0xe9, 0x4c, 0xcc, 0xe3, 0xc7, 0xcf, 0xf6, 0xc7, 0x61, 0xa8, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x58, 0xc8, 0x46, 0x47, 0x9d, 0x42, 0x61, 0xe9, 0x4c, 0x82, 0xf1, 0x6c, 0x01, 0x2b, 0x00, 0x97, 0xe3, 0x84, 0xb7, 0xe0, 0xb0, 0x08, 0x41, 0x00, 0x2c, 0x91, 0x27, 0x63, 0xdf, 0x4e,
  0x00, 0x00, 0x2e, 0x00, 0x00, 0x3a, 0x00, 0x00, 0x38, 0x00, 0x00, 0x3a, 0x00, 0x00, 0x2e, 0x00, 0x00, 0x38, 0x00, 0x00, 0x3a, 0x00, 0x00, 0x2e, 0x00, 0x00, 0x3a, 0x00, 0x00, 0x38, 0x00, 0x00, 0x17, 0x00, 0x00, 0x17, 0x00, 0x00, 0x17, 0x00, 0x00, 0x17, 0x00, 0x00, 0x38, 0x00, 0x00, 0x3a, 0x00, 0x00, 0x17, 0x00, 0x00, 0x14, 0x00, 0x00, 0x17, 0x00, 0x00, 0x17, 0x00, 0x00, 0x17, 0x00, 0x00, 0x17, 0x00, 0x00, 0x14, 0x00, 0x00, 0x17, 0x00, 0x00, 0x17, 0x00, 0x00, 0x23, 0x00, 0x00, 0x23, 0x00, 0x00, 0x17, 0x00, 0x00, 0x17, 0x00, 0x00, 0x23, 0x00, 0x00, 0x23, 0x00, 0x00, 0x17, 0x00, 0x00, 0x17, 0x00, 0x00, 0x0e, 0x00, 0x00, 0x23, 0x00, 0x00, 0x17, 0x00, 0x00, 0x17, 0x00, 0x00, 0x23, 0x00, 0x00, 0x0e, 0x00, 0x00, 0x17, 0x00, 0x00, 0x37, 0x00, 0x00, 0x10, 0x00, 0x00, 0x17, 0x00, 0x00, 0x10, 0x00, 0x00, 0x14, 0x00, 0x00, 0x17, 0x00, 0x00, 0x10, 0x00, 0x00, 0x37, 0x00, 0x00, 0x36, 0x00, 0x00, 0x14, 0x00, 0x00, 0x37, 0x00, 0x00, 0x17, 0x00, 0x00, 0x17, 0x00, 0x00, 0x37, 0x00, 0x00, 0x14, 0x00, 0x00, 0x36, 0x00, 0x00, 0x36, 0x00, 0x00, 0x37, 0x00, 0x00, 0x14, 0x00, 0x00, 0x37, 0x00, 0x00, 0x37, 0x00, 0x00, 0x14, 0x00, 0x00, 0x37, 0x00, 0x00, 0x36,
  0x14, 0x0b, 0x0b, 0x14, 0x0b, 0x0b, 0x14, 0x0b, 0x0b, 0xfa, 0xfa, 0xfa, 0xfa, 0xfa, 0xfa, 0x14, 0x0b, 0x0b, 0x14, 0x0b, 0x0b, 0x14, 0x0b, 0x0b, 0xda, 0xda, 0xda, 0xea, 0xea, 0xea, 0xfa, 0xfa, 0xfa, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfa, 0xfa, 0xfa, 0xea, 0xea, 0xea, 0xda, 0xda, 0xda, 0xea, 0xea, 0xea, 0x14, 0x0b, 0x0b, 0x14, 0x0b, 0x0b, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x14, 0x0b, 0x0b, 0x14, 0x0b, 0x0b, 0xea, 0xea, 0xea, 0xfa, 0xfa, 0xfa, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfa, 0xfa, 0xfa, 0x0f, 0x0a, 0x0a, 0xff, 0xb1, 0xce, 0xff, 0xff, 0xff, 0x0f, 0x0a, 0x0a, 0x0f, 0x0a, 0x0a, 0xff, 0xff, 0xff, 0xff, 0xb1, 0xce, 0x0f, 0x0a, 0x0a, 0xfa, 0xfa, 0xfa, 0x0f, 0x0a, 0x0a, 0x14, 0x0b, 0x0b, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x14, 0x0b, 0x0b, 0x0f, 0x0a, 0x0a, 0xfa, 0xfa, 0xfa, 0xfa, 0xfa, 0xfa, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x31, 0x27, 0x27, 0x0f, 0x0a, 0x0a, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfa, 0xfa, 0xfa, 0x6b, 0x38, 0x1a, 0xfa, 0xfa, 0xfa, 0xff, 0xff, 0xff, 0x31, 0x27, 0x27, 0x0f, 0x0a, 0x0a, 0xff, 0xff, 0xff, 0xfa, 0xfa, 0xfa, 0x78, 0x43, 0x22,
  0xe6, 0xff, 0xff, 0xff, 0xff, 0xff, 0xac, 0xdf, 0xff, 0x37, 0xa0, 0xff, 0x71, 0xc0, 0xff, 0xac, 0xdf, 0xff, 0xac, 0xdf, 0xff, 0xac, 0xdf, 0xff, 0xac, 0xdf, 0xff, 0xac, 0xdf, 0xff, 0xac, 0xdf, 0xff, 0x37, 0xa0, 0xff, 0x37, 0xa0, 0xff, 0x71, 0xc0, 0xff, 0xac, 0xdf, 0xff, 0x71, 0xc0, 0xff, 0xac, 0xdf, 0xff, 0x0a, 0x0a, 0x08, 0x0a, 0x0a, 0x08, 0x71, 0xc0, 0xff, 0x71, 0xc0, 0xff, 0x0a, 0x0a, 0x08, 0x0a, 0x0a, 0x08, 0x71, 0xc0, 0xff, 0x71, 0xc0, 0xff, 0x0a, 0x0a, 0x08, 0x00, 0x00, 0x00, 0xac, 0xdf, 0xff, 0xe6, 0xff, 0xff, 0x00, 0x00, 0x00, 0x0a, 0x0a, 0x08, 0x71, 0xc0, 0xff, 0x37, 0xa0, 0xff, 0x71, 0xc0, 0xff, 0x71, 0xc0, 0xff, 0x0a, 0x0a, 0x08, 0x0a, 0x0a, 0x08, 0xff, 0xff, 0xff, 0xac, 0xdf, 0xff, 0x71, 0xc0, 0xff, 0xac, 0xdf, 0xff, 0x71, 0xc0, 0xff, 0x08, 0x08, 0x05, 0x09, 0x09, 0x07, 0x09, 0x09, 0x07, 0x08, 0x08, 0x05, 0xe6, 0xff, 0xff, 0x71, 0xc0, 0xff, 0xe6, 0xff, 0xff, 0xac, 0xdf, 0xff, 0x08, 0x08, 0x05, 0x37, 0xa0, 0xff, 0x71, 0xc0, 0xff, 0x08, 0x08, 0x05, 0x71, 0xc0, 0xff, 0x37, 0xa0, 0xff, 0xe6, 0xff, 0xff, 0xac, 0xdf, 0xff, 0x37, 0xa0, 0xff, 0x71, 0xc0, 0xff, 0x71, 0xc0, 0xff, 0x37, 0xa0, 0xff, 0x37, 0xa0, 0xff, 0x37, 0xa0, 0xff
};

unsigned int imgFacesOffset = 0;

byte imgFace[192] = {};


void LoadFace(unsigned int id) {
  imgFacesOffset = 192*id;
  for (byte i = 0; i < 192; i++) {
    imgFace[i] = pgm_read_word_near(imgFaces + imgFacesOffset + i);
  }
}

void DisplayLEDFace () {
  for(int i = 0; i < NUM_LEDS; i++) { 
    dot = FacePixelMap[i];
    leds[dot].r = imgFace[i*3+0];
    leds[dot].g = imgFace[i*3+1];
    leds[dot].b = imgFace[i*3+2];
  }
  FastLED.show();
}

void setup() {
  #ifdef DEBUG
    Serial.begin(9600);
  #endif
  //pinMode(LED_BUILTIN, OUTPUT);
  // put your setup code here, to run once:
  FastLED.addLeds<NEOPIXEL, DATA_PIN>(leds, NUM_LEDS).setCorrection(TypicalLEDStrip);
  FastLED.setBrightness(BRIGHNESS);
  LoadFace(0);
  DisplayLEDFace();
}


void loop() {
  setBrightness();
  //digitalWrite(LED_BUILTIN, LOW);
  if (!FaceDelay()) {
    FaceTransition();
  } else {
    FastLED.show();
  }
  delay(50);
  //digitalWrite(LED_BUILTIN, HIGH);
  //delay(10);
}

bool FaceTransitionDone() {
  for(int i = 0; i < NUM_LEDS; i++) { 
    if (usedPoint[i] == false) return false;
  }
  return true;
}

void setBrightness() {
  brightness = map(analogRead(LIGHT_SENSOR_PIN), LIGHT_MIN, LIGHT_MAX, 16, BRIGHNESS);
  FastLED.setBrightness(brightness);
}

bool FaceDelay() {
  if (FaceTransitionDone()) {
    if (timeToUpdate == 0) timeToUpdate = 61;
    if (timeToUpdate > 1) {
      timeToUpdate--;
      #ifdef DEBUG
        Serial.println(timeToUpdate);
      #endif
      return true;
    }
  }
  return false;
}

void FaceTransitionUnUsed() {
  for(int i = 0; i < NUM_LEDS; i++) { 
    usedPoint[i] = false;
  }
}

void FaceTransition() {
  if (FaceTransitionDone()) {
    #ifdef DEBUG
      Serial.println("Face done");
    #endif
    timeToUpdate = 0;
    FaceTransitionUnUsed();
    currentFace++;
    if (currentFace >= maxFaces) currentFace=0;
    LoadFace(currentFace);
    #ifdef DEBUG
      Serial.print("Face to ");
      Serial.println(currentFace);
    #endif
  }
  while (true) {
    randomDot = random(0, NUM_LEDS);
    if (usedPoint[randomDot] == false) {
      break;
    }
  }
  usedPoint[randomDot] = true;
  XDot(randomDot, 
    imgFace[randomDot*3+0], 
    imgFace[randomDot*3+1], 
    imgFace[randomDot*3+2]
   );
  FastLED.show();
}

void XDot(int x, unsigned int r, unsigned int g, unsigned int b) {
  dot = FacePixelMap[x];
  leds[dot].r = r<0?0:(r>255?255:r);
  leds[dot].g = g<0?0:(g>255?255:g);
  leds[dot].b = b<0?0:(b>255?255:b);
}
